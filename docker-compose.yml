version: '3'
networks:
  saaslocalnetwork:
    external: true

services:
  req-router:
    image: public.ecr.aws/n5k3t9x2/req_router:latest
    networks:
      - saaslocalnetwork
    command: ["sh", "src/wait-for-it.sh"]
    volumes:
      - ./tls:/usr/src/app/tls
      - /etc/letsencrypt:/etc/letsencrypt
    environment:
      - APP_SECRET_KEY=${APP_SECRET_KEY}
      - COMMUNITY_URL=${COMMUNITY_URL}
      - COMPOSE_HTTP_TIMEOUT=300
      - CUSTOMER_AD_EMAIL_ATTR=${CUSTOMER_AD_EMAIL_ATTR}
      - CUSTOMER_AD_SEARCH_BASE_OU=${CUSTOMER_AD_SEARCH_BASE_OU}
      - CUSTOMER_AD_SERVER_URI=${CUSTOMER_AD_SERVER_URI}
      - CUSTOMER_AD_SERVICE_PASSWORD=${CUSTOMER_AD_SERVICE_PASSWORD}
      - CUSTOMER_AD_SERVICE_USERNAME=${CUSTOMER_AD_SERVICE_USERNAME}
      - CUSTOMER_AD_USERNAME_ATTR=${CUSTOMER_AD_USERNAME_ATTR}
      - CUSTOMER_AD_USE_TLS=${CUSTOMER_AD_USE_TLS}
      - DAGKNOWS_ELASTIC_URL=${DAGKNOWS_ELASTIC_URL}
      - DAGKNOWS_URL=${DAGKNOWS_URL}
      - DEFAULT_PAGE_SIZE=${DEFAULT_PAGE_SIZE}
      - ENFORCE_LOGIN=${ENFORCE_LOGIN}
      - FLASK_ENV=development
      - GEVENT_SUPPORT=True
      - MAIL_DEFAULT_SENDER=${MAIL_DEFAULT_SENDER}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - MAIL_SERVER=${MAIL_SERVER}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MONKEY_PATCHING=True
      - NO_SSL=${NO_SSL}
      - POSTGRESQL_DB_HOST=${POSTGRESQL_DB_HOST}
      - POSTGRESQL_DB_NAME=${POSTGRESQL_DB_NAME}
      - POSTGRESQL_DB_PASSWORD=${POSTGRESQL_DB_PASSWORD}
      - POSTGRESQL_DB_PORT=${POSTGRESQL_DB_PORT}
      - POSTGRESQL_DB_USER=${POSTGRESQL_DB_USER}
      - PYTHONUNBUFFERED=1
      - SUPER_PASSWORD=${SUPER_PASSWORD}
      - SUPER_USER=${SUPER_USER}
      - SUPER_USER_FIRSTNAME=${SUPER_USER_FIRSTNAME}
      - SUPER_USER_LASTNAME=${SUPER_USER_LASTNAME}
      - SUPER_USER_ORG=${SUPER_USER_ORG}
      - SUPPORT_AD_AUTHENTICATION=${SUPPORT_AD_AUTHENTICATION}
      - VERBOSE=${VERBOSE}
      - WAIT_COMMAND=[ $$(curl --write-out %{http_code} --silent --output /dev/null http://elasticsearch:9200/_cat/health?h=st) = 200 ]
      - WAIT_LOOPS=30
      - WAIT_SLEEP=10
      - ENFORCE_SECURE_COOKIE=${ENFORCE_SECURE_COOKIE}
      - api_key=${api_key}

  conv-mgr:
    image: public.ecr.aws/n5k3t9x2/conv_mgr:latest
    networks:
      - saaslocalnetwork
    environment:
      - DAGKNOWS_WSFE_URL=${DAGKNOWS_WSFE_URL}
      - DAGKNOWS_ELASTIC_URL=${DAGKNOWS_ELASTIC_URL}
      - DAGKNOWS_URL=${DAGKNOWS_URL}
      - GEVENT_SUPPORT=True
      - PYTHONUNBUFFERED=1

  apigateway:
    image: public.ecr.aws/n5k3t9x2/apigateway:latest
    networks:
      - saaslocalnetwork
    environment:
      - DAGKNOWS_ELASTIC_URL=${DAGKNOWS_ELASTIC_URL}
      - DagKnowsReqRouterHost=${DAGKNOWS_URL}
    restart: on-failure

  ansi-processing:
    image: public.ecr.aws/n5k3t9x2/ansi_processing:latest
    networks:
      - saaslocalnetwork

  settings:
    image: public.ecr.aws/n5k3t9x2/settings:latest
    networks:
      - saaslocalnetwork
    environment:
      - MONKEY_PATCHING=True
      - DAGKNOWS_ELASTIC_URL=${DAGKNOWS_ELASTIC_URL}
      - FLASK_ENV=development
      - SUPER_USER_ORG=${SUPER_USER_ORG}
      - DAGKNOWS_URL=${DAGKNOWS_URL}
      - COMMUNITY_URL=${COMMUNITY_URL}
      - COMMUNITY=${COMMUNITY}
      - PYTHONUNBUFFERED=1
      - GEVENT_SUPPORT=True
    command: ["python", "src/settings.py"]
  wsfe:
    image: public.ecr.aws/n5k3t9x2/wsfe:latest
    restart: unless-stopped
    networks:
      - saaslocalnetwork
    environment:
      - APP_SECRET_KEY=${APP_SECRET_KEY}
      - POSTGRESQL_DB_USER=${POSTGRESQL_DB_USER}
      - POSTGRESQL_DB_PASSWORD=${POSTGRESQL_DB_PASSWORD}
      - POSTGRESQL_DB_HOST=${POSTGRESQL_DB_HOST}
      - POSTGRESQL_DB_PORT=${POSTGRESQL_DB_PORT}
      - POSTGRESQL_DB_NAME=${POSTGRESQL_DB_NAME}

  jobsched:
    image: public.ecr.aws/n5k3t9x2/jobsched:latest
    networks:
      - saaslocalnetwork
    environment:
      - DAGKNOWS_ELASTIC_URL=${DAGKNOWS_ELASTIC_URL}
      - POSTGRESQL_DB_USER=${POSTGRESQL_DB_USER}
      - POSTGRESQL_DB_PASSWORD=${POSTGRESQL_DB_PASSWORD}
      - POSTGRESQL_DB_HOST=${POSTGRESQL_DB_HOST}
      - POSTGRESQL_DB_PORT=${POSTGRESQL_DB_PORT}
      - POSTGRESQL_DB_NAME=${POSTGRESQL_DB_NAME}


  taskservice:
    image: public.ecr.aws/n5k3t9x2/taskservice:latest
    networks:
      - saaslocalnetwork
    command: ["python", "src/gateway.py"]
    environment:
      - ALLOW_DK_USER_INFO_HEADER=true
      - COMMUNITY_URL=${COMMUNITY_URL}
      - COMMUNITY=${COMMUNITY}
      - DAGKNOWS_ELASTIC_URL=${DAGKNOWS_ELASTIC_URL}
      - DAGKNOWS_PROXY_URL=http://wsfe:4446/proxies
      - DAGKNOWS_FORCE_TOKEN=${DAGKNOWS_FORCE_TOKEN}
      - DAGKNOWS_WSFE_URL=${DAGKNOWS_WSFE_URL}
      - DEFAULT_ORG=${DEFAULT_ORG}
      - ENFORCE_LOGIN=${ENFORCE_LOGIN}
      - FLASK_ENV=development
      - GEVENT_SUPPORT=True
      - MONKEY_PATCHING=True
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_ORG_ID=${OPENAI_ORG_ID}
      - POSTGRESQL_DB_HOST=${POSTGRESQL_DB_HOST}
      - POSTGRESQL_DB_NAME=${POSTGRESQL_DB_NAME}
      - POSTGRESQL_DB_PASSWORD=${POSTGRESQL_DB_PASSWORD}
      - POSTGRESQL_DB_PORT=${POSTGRESQL_DB_PORT}
      - POSTGRESQL_DB_USER=${POSTGRESQL_DB_USER}
      - PYTHONUNBUFFERED=1
      - SUPER_USER_ORG=${SUPER_USER_ORG}

  nginx:
    image: nginx:latest
    networks:
      - saaslocalnetwork
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./sample-selfsigned.key:/root/ssl/server.key
      - ./sample-selfsigned.crt:/root/ssl/server.crt
    depends_on:
      - req-router
      - dagknows-nuxt
      - wsfe
    ports:
      - 80:80

  dagknows-nuxt:
    image: public.ecr.aws/n5k3t9x2/dagknows_nuxt:latest
    networks:
      - saaslocalnetwork
    command: npm run serve
    environment:
      - DAGKNOWS_ELASTIC_URL=${DAGKNOWS_ELASTIC_URL}
      - ALLOW_DK_USER_INFO_HEADER=true
      - NODE_ENV=production
      - DEFAULT_ORG=${DEFAULT_ORG}
      - SUPER_USER_ORG=${SUPER_USER_ORG}
      - NITRO_PRESET=${NITRO_PRESET}
      - COMMUNITY_URL=${COMMUNITY_URL}
      - COMMUNITY=${COMMUNITY}
      - DOWNLOAD_TASK_ID=${DOWNLOAD_TASK_ID}
      - ENFORCE_LOGIN=${ENFORCE_LOGIN}
      - NUXT_PUBLIC_GTAG_ID=${NUXT_PUBLIC_GTAG_ID}
      - ENABLE_WEBSOCKETS=${ENABLE_WEBSOCKETS}
    depends_on:
      - req-router
