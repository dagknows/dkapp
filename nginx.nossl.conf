user  nginx;
events {
  worker_connections   1000000;
}
http {
  #log_format custom_log '$remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" "$http_host" "$http_x_forwarded_for" "$http_cookie"';
  #log_format custom_log '"$request" $status "Content-Length: $content_length"';
  #access_log /dev/stdout custom_log;

  # Gzip Settings
  gzip on;
  gzip_disable "msie6";
  gzip_vary on;
  gzip_proxied any;
  gzip_comp_level 6;
  gzip_buffers 32 16k;
  gzip_http_version 1.1;
  gzip_min_length 250;
  gzip_types image/jpeg image/bmp image/svg+xml text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript image/x-icon;

  # security headers
  add_header X-Frame-Options "SAMEORIGIN" always;
  add_header X-XSS-Protection "1; mode=block" always;
  add_header X-Content-Type-Options "nosniff" always;
  add_header Referrer-Policy "no-referrer-when-downgrade" always;
  add_header Content-Security-Policy "default-src * data: 'unsafe-eval' 'unsafe-inline'" always;
  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

  # Optimize session cache
  resolver 8.8.8.8 8.8.4.4 208.67.222.222 208.67.220.220 valid=60s;
  resolver_timeout 2s;

  server {
    listen 24678;
    #http2 on;
    server_name localhost_24678;
    location / {
      proxy_pass http://dagknows-nuxt:24678;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
    }
  }

  server {
    listen  80 default_server;

    server_name localhost;

    # These Access-Control headers are for CORS.
    # Do not enable these headers on production until we have good reason to.  We may not want people to embed our pages inside an iframe, etc.
    #add_header 'Access-Control-Allow-Origin' "$http_origin" always;
    #add_header 'Access-Control-Allow-Credentials' 'true' always;
    #add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS, PATCH' always;
    #add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With,Content-Length' always;

    add_header  X-Accel-Buffering  no;
    proxy_pass_request_headers on;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Host $host;
    proxy_set_header Host-With-Port $http_host;
    proxy_set_header Connection $http_connection;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-HTTPS    on;
    proxy_set_header Authorization $http_authorization;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Prefix /;
    proxy_request_buffering off;

    proxy_connect_timeout       600;
    proxy_send_timeout          600;
    proxy_read_timeout          600;
    send_timeout                600;

    proxy_http_version 1.1;
    chunked_transfer_encoding off;                
    proxy_buffering off;
    proxy_cache off;
    proxy_redirect off;

    location ~ ^/$ {
      proxy_set_header Connection 'close';
      proxy_pass http://dagknows-nuxt:3000;
    }

    location ~ ^/(_nuxt|__nuxt_devtools__|_vfs.json|@vite|favicon|vlogin|vLoginRedirect|vlogout|vsettings|my-runbooks|my-drafts|shared-with-me|tasks|task-create|test|forgot-password|reset-password|edit-user-profile|change-password|vintegrations|add-tenant|user-dashboard|cli-sessions|envs|deleted-tasks|privacy-policy) {
      proxy_set_header Connection 'close';
      proxy_pass http://dagknows-nuxt:3000;
    }
    location ~ ^/n/ {
      proxy_set_header Connection 'close';
      proxy_pass http://dagknows-nuxt:3000;
    }
    location ~ ^/(vstatic).*\.(jpg|jpeg|png|gif|ico|svg)$ {
      proxy_set_header Connection 'close';
      proxy_pass http://dagknows-nuxt:3000;
      expires 30d;
    }
    location ~ ^/vstatic/.*\.min\..*$ {
      proxy_set_header Connection 'close';
      proxy_pass http://dagknows-nuxt:3000;
      expires 30d;
    }
    location ~ ^/vstatic/.*(jsonview|fontawesome|skulpt) {
      proxy_set_header Connection 'close';
      proxy_pass http://dagknows-nuxt:3000;
      expires 30d;
    }
    location ~ ^/vstatic/.*/(styles\.css|our_jquery_dependent_code\.js|add_tenant_styles\.css) {
      proxy_set_header Connection 'close';
      proxy_pass http://dagknows-nuxt:3000;
      expires 1d;
    }

    # API requests for in-req-router tasks endpoint (deprecated)
    location ~ /api/(tasks|jobs|users|iam) {
      if ($request_method = OPTIONS ) {
        return 200;
      }
      proxy_set_header Connection 'close';
      proxy_pass http://req-router:8888;
    }

    # API requests for the tasks service
    location ~ /api/v1/(tasks|jobs|users|iam) {
      if ($request_method = OPTIONS ) {
        return 200;
      }
      proxy_set_header Connection 'close';
      proxy_pass http://req-router:8888;
    }

    # General API requests
    location /api {
      proxy_set_header Connection 'close';
      proxy_pass http://apigateway:9080;
    }

    location ~ ^/(subscribe|forceRefresh|logEveryoneOff) {
      proxy_pass http://conv-sse:3335;
    }

    location /proxy_subscribe {
      proxy_pass http://proxy-sse:4445;
    }              
    location /wsfe/ {
      proxy_pass http://wsfe:4446/; 
    }              

    # Everything else to reqrouter
    location / {
      if ($request_method = OPTIONS ) {
        return 200;
      }
      proxy_set_header Connection 'close';
      proxy_pass http://req-router:8888;
    }
  }
}
